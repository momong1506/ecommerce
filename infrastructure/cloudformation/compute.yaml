AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Compute for E-Commerce Platform (100% FREE TIER - t2.micro)'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: ecommerce

  KeyPairName:
    Description: EC2 Key Pair for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  LatestAmiId:
    Description: Latest Amazon Linux 2023 AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

Resources:
  # EC2 Instance (FREE TIER - t2.micro)
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro  # FREE TIER eligible
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1Id
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${EnvironmentName}-EC2SecurityGroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e

          # Update system
          dnf update -y

          # Install Docker
          dnf install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Install Git
          dnf install -y git

          # Create application directory
          mkdir -p /home/ec2-user/app
          chown ec2-user:ec2-user /home/ec2-user/app

          # Install CloudWatch agent (for monitoring - FREE TIER)
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm

          echo "EC2 instance setup complete!" > /home/ec2-user/setup-complete.txt
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2
        - Key: Environment
          Value: !Ref EnvironmentName

  # Elastic IP for EC2 (FREE TIER - 1 EIP free when attached)
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-eip

  # IAM Role for EC2 (for CloudWatch logs, SSM, etc.)
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}-ec2-profile
      Roles:
        - !Ref EC2Role

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub ${EnvironmentName}-InstanceId

  PublicIP:
    Description: Public IP address of EC2 instance
    Value: !Ref ElasticIP
    Export:
      Name: !Sub ${EnvironmentName}-PublicIP

  PublicDNS:
    Description: Public DNS name of EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: !Sub ${EnvironmentName}-PublicDNS

  SSHCommand:
    Description: SSH command to connect to instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${ElasticIP}'
